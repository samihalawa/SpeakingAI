// I need help enhancing my Spanish learning chat interface. Here are the specific changes needed:

1. Enhance the ChatInterface.tsx message rendering to display all OpenAI JSON response data beautifully:
   - Show original message
   - Show translation with a language icon
   - Display explanation in a distinct card/section
   - Show examples in a quoted format
   - Display detected vocabulary items as interactive cards
   - Use proper icons from lucide-react for each section
   - Implement smooth animations using framer-motion
   - Use proper spacing and hierarchy

2. Move vocabulary management to a Dialog component:
   - Create a new VocabularyDialog component
   - Move edit/delete functionality from cards to the dialog
   - Show full vocabulary details including:
     * Word and translation
     * Usage type with badge
     * Examples with translations
     * Grammar notes
     * Edit and delete buttons in the header

3. Enhance the VocabularyCard component:
   - Make it more compact in the chat
   - Show basic info (word, translation, usage type)
   - Add hover states
   - Make it clickable to open the detailed dialog
   - Add subtle animations

4. Use proper TypeScript interfaces for all components:
   - Message interface with all JSON response fields
   - VocabularyItem interface
   - Dialog and Card prop interfaces

Please provide the complete code for these components, including:
- ChatInterface.tsx message rendering section
- VocabularyCard.tsx component
- VocabularyDialog.tsx component
- Required interfaces and types
- Necessary imports (shadcn/ui, lucide-react, framer-motion)

Ensure all components follow the existing design system using shadcn/ui components and maintain consistency with the current theme.In ChatInterface.tsx, enhance the message rendering to show all JSON info beautifully
interface Message {
  id: string;
  role: "user" | "assistant";
  content: string;
  translation?: string;
  explanation?: string;
  detectedVocabulary?: VocabularyItem[];
  examples?: string[];
}
// Enhanced ChatInterface message rendering
return (
  <motion.div
    key={message.id}
    initial={{ opacity: 0, y: 10 }}
    animate={{ opacity: 1, y: 0 }}
    exit={{ opacity: 0 }}
    className={cn(
      "flex flex-col gap-3 relative w-full max-w-3xl mx-auto",
      message.role === "user" ? "items-end" : "items-start"
    )}
  >
    <Card className={cn(
      "w-full",
      message.role === "user" ? "bg-primary/10" : "bg-accent"
    )}>
      <CardContent className="p-4 space-y-4">
        {/* Original Message */}
        <div className="flex items-start gap-2">
          <MessageCircle className="h-5 w-5 mt-1 shrink-0" />
          <p className="text-lg font-medium">{message.content}</p>
        </div>
        {/* Translation if exists */}
        {message.translation && (
          <div className="flex items-start gap-2 pl-7">
            <Languages className="h-5 w-5 mt-1 shrink-0 text-blue-500" />
            <p className="text-base text-muted-foreground">{message.translation}</p>
          </div>
        )}
        {/* Explanation if exists */}
        {message.explanation && (
          <div className="flex items-start gap-2 pl-7 bg-accent/50 p-3 rounded-md">
            <BookOpen className="h-5 w-5 mt-1 shrink-0 text-emerald-500" />
            <p className="text-sm text-muted-foreground whitespace-pre-wrap">
              {message.explanation}
            </p>
          </div>
        )}
        {/* Examples if exist */}
        {message.examples && message.examples.length > 0 && (
          <div className="pl-7 space-y-2">
            <div className="flex items-center gap-2">
              <Quote className="h-5 w-5 text-purple-500" />
              <p className="text-sm font-medium">Examples:</p>
            </div>
            {message.examples.map((example, idx) => (
              <div key={idx} className="pl-7 border-l-2 border-purple-200">
                <p className="text-sm text-muted-foreground">{example}</p>
              </div>
            ))}
          </div>
        )}
        {/* Vocabulary Cards */}
        {message.detectedVocabulary && message.detectedVocabulary.length > 0 && (
          <div className="pl-7 mt-4 space-y-3">
            <div className="flex items-center gap-2">
              <Book className="h-5 w-5 text-amber-500" />
              <p className="text-sm font-medium">Vocabulary:</p>
            </div>
            <div className="grid gap-2">
              {message.detectedVocabulary.map((vocab, idx) => (
                <VocabularyCard
                  key={idx}
                  vocab={vocab}
                  onShowDetails={() => setSelectedVocab(vocab)}
                />
              ))}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  </motion.div>
);
// Enhanced VocabularyCard component
export function VocabularyCard({ vocab, onShowDetails }: VocabularyCardProps) {
  return (
    <Card className="bg-background/50 hover:bg-background/80 transition-colors cursor-pointer" 
          onClick={onShowDetails}>
      <CardContent className="p-3 space-y-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <span className="text-lg font-medium">{vocab.word}</span>
            <Badge variant={vocab.usage_type === '正式' ? 'default' : 
                          vocab.usage_type === '口语' ? 'secondary' : 'outline'}>
              {vocab.usage_type}
            </Badge>
          </div>
          <ChevronRight className="h-4 w-4 text-muted-foreground" />
        </div>
        <p className="text-sm text-muted-foreground">{vocab.translation}</p>
      </CardContent>
    </Card>
  );
}
// Enhanced VocabularyDialog
export function VocabularyDialog({ vocab, isOpen, onClose }: VocabularyDialogProps) {
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <span className="text-xl">{vocab.word}</span>
              <Badge>{vocab.usage_type}</Badge>
            </div>
            <div className="flex items-center gap-2">
              <Button variant="outline" size="icon">
                <Edit2 className="h-4 w-4" />
              </Button>
              <Button variant="outline" size="icon" className="text-destructive">
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
          </DialogTitle>
        </DialogHeader>
        <div className="space-y-6 py-4">
          {/* Translation */}
          <div className="space-y-2">
            <Label className="text-primary">Translation</Label>
            <p className="text-lg">{vocab.translation}</p>
          </div>
          {/* Example */}
          {vocab.example && (
            <div className="space-y-2">
              <Label className="text-primary">Example</Label>
              <div className="bg-accent/50 p-4 rounded-md space-y-2">
                <p className="text-base">{vocab.example}</p>
                <p className="text-sm text-muted-foreground">{vocab.example_translation}</p>
              </div>
            </div>
          )}
          {/* Grammar Notes */}
          {vocab.grammar_notes && (
            <div className="space-y-2">
              <Label className="text-blue-600">Grammar Notes</Label>
              <div className="bg-blue-50 p-4 rounded-md">
                <p className="text-sm whitespace-pre-wrap">{vocab.grammar_notes}</p>
              </div>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
This enhanced version:

Shows all message components with proper icons and spacing
Uses motion animations for smooth transitions
Implements a clean card-based layout for vocabulary items
Includes a detailed dialog for vocabulary exploration
Uses consistent styling and spacing
Includes proper iconography for different types of content
Maintains proper hierarchy of information
Uses badges for usage types
Implements hover states and interactions
Make sure to import all necessary icons from lucide-react:

import { 
  MessageCircle, 
  Languages, 
  BookOpen, 
  Quote, 
  Book, 
  ChevronRight, 
  Edit2, 
  Trash2 
} from "lucide-react";